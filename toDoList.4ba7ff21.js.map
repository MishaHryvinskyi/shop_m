{"mappings":"AAAO,MAAMA,EAAO,CAACC,EAAKC,KACtB,IACI,MAAMC,EAAOC,KAAKC,UAAUH,GAC5BI,aAAaC,QAAQN,EAAKE,E,CAC5B,MAAOK,GACLC,QAAQC,MAAM,kBAAmBF,EAAIG,Q,GAIhCC,EAAQX,IACjB,IACI,MAAME,EAAOG,aAAaO,QAAQZ,GAClC,OAAgB,OAATE,OAAgBW,EAAYV,KAAKW,MAAMZ,E,CAChD,MAAMK,GACJC,QAAQC,MAAM,cAAeF,EAAIG,Q,GCXnCK,EAAUC,SAASC,eAAe,WAClCC,EAAOF,SAASC,eAAe,QAErC,IAAIE,EAAY,EAwBhB,SAASC,EAASC,EAAMC,GAAS,EAAOC,EAAKJ,GACzC,MAAMK,EAAOR,SAASS,cAAc,MACpCD,EAAKE,YAAcL,EACnBG,EAAKG,QAAQJ,GAAKA,EACfD,GAAQE,EAAKI,UAAUC,IAAI,WAC9BX,EAAKY,YAAYN,GA3BrB,SAAwBO,GACpB,MAAMC,EAAOhB,SAASS,cAAc,QAC9BQ,EAAMjB,SAASkB,eAAe,KACpCF,EAAKG,UAAY,QACjBH,EAAKF,YAAYG,GACjBF,EAAOD,YAAYE,E,CAuBnBI,CAAeZ,E,CAuBnB,SAASa,EAAiBhB,EAAMC,GAC5B,MAAO,C,KACHD,E,OACAC,EACAC,GAAIJ,E,CCzDZ,MAAMmB,EAAOtB,SAASC,eAAe,QACtBD,SAASC,eAAe,UAEhCsB,iBAAiB,SDOxB,WACI,MAAMC,EAAOzB,EAAQd,MAAMwC,OAE3B1B,EAAQd,MAAQ,GAEJ,KAATuC,GAKHpB,EAASoB,GAyCb,SAA0BnB,EAAMC,GAAS,GACrC,MAAMoB,EAAe/B,EAlEL,SAmEhB,QAAoBE,IAAjB6B,EAA4B,CAC3B,MAAMC,EAAM,CAACN,EAAiBhB,EAAMC,IACpCvB,EArEY,QAqEM4C,E,MAElBD,EAAaE,KAAKP,EAAiBhB,EAAMC,IACzCvB,EAxEY,QAwEM2C,GAEtBvB,GAAa,C,CAjDb0B,CAAiBL,IALbM,MAAM,iB,ICZdR,EAAKC,iBAAiB,SD6BtB,UAA4BR,OAAEA,IAC9B,MAAMW,EAAe/B,EAtCD,SAwChB,GAAuB,OAApBoB,EAAOgB,SAAmB,CACzBhB,EAAOH,UAAUoB,OAAO,WACxB,MAAMC,EAAYP,EAAaQ,WAC1BV,GAASW,OAAOX,EAAKjB,MAAQ4B,OAAOpB,EAAOJ,QAAQJ,MAExDmB,EAAaO,GAAW3B,QAAUoB,EACjCO,GAAW3B,M,MACT,GAAGS,EAAOH,UAAUwB,SAAS,SAAU,CAC1CrB,EAAOsB,WAAWC,SAClB,MAAML,EAAYP,EAAaQ,WAC1BV,GAASW,OAAOX,EAAKjB,MAAQ4B,OAAOpB,EAAOsB,WAAW1B,QAAQJ,MAEnEmB,EAAaa,OAAON,EAAW,E,CAEnClD,EAtDgB,QAsDE2C,E,IC7CtBc,OAAOjB,iBAAiB,oBDoExB,WACI,MAAMG,EAAe/B,EA9EL,cAgFIE,IAAjB6B,GACCA,EAAae,SAAQ,EAACpC,KAAEA,EAAIE,GAAEA,EAAED,OAAEA,KAClCF,EAASC,EAAME,EAAID,I,ICtE3B,MAAMoC,EAAO,IAAIC,KAEjBC,YAAY,KACRpD,QAAQqD,IAAIH,EAAKI,cAAc,GAChC,KACHF,YAAY,KACRpD,QAAQqD,IAAIH,EAAKK,aAAa,GAC/B,KACHH,YAAY,KACRpD,QAAQqD,IAAIH,EAAKM,WAAW,GAC7B","sources":["src/toDoScripts/storage.js","src/toDoScripts/function.js","src/toDoScripts/main.js"],"sourcesContent":["export const save = (key, value) => {\n    try {\n        const data = JSON.stringify(value);\n        localStorage.setItem(key, data);\n    } catch (err) {\n        console.error(\"Stringify error\", err.message);\n    }\n};\n\nexport const load = (key) => {\n    try {\n        const data = localStorage.getItem(key);\n        return data === null ? undefined : JSON.parse(data);\n    } catch(err) {\n        console.error(\"Parse error\", err.message);\n    }\n};","import { save, load } from \"./storage\";\n\nconst STORAGE_KEY = \"tasks\";\nconst myInput = document.getElementById(\"myInput\");\nconst myUL = document.getElementById(\"myUL\");\n\nlet currentId = 0;\n\nfunction addCloseButton(target) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(\"\\u00D7\");\n    span.className = \"close\";\n    span.appendChild(txt);\n    target.appendChild(span)\n}\n\nfunction addNewTask() {\n    const task = myInput.value.trim();\n    \n    myInput.value = '';\n\n    if(task === '') {\n        alert(\"Введіть текст!\");\n        return;\n    }\n\n    createLi(task);\n    addTaskToStorage(task);\n}\n\nfunction createLi(text, isDone = false, id = currentId) {\n    const liEl = document.createElement(\"li\");\n    liEl.textContent = text;\n    liEl.dataset.id = id;\n    if(isDone) liEl.classList.add(\"checked\");\n    myUL.appendChild(liEl);\n    addCloseButton(liEl);\n}\n\nfunction handleTaskBehavior({ target }) {\nconst currentState = load(STORAGE_KEY);\n\n    if(target.nodeName === \"LI\") {\n        target.classList.toggle(\"checked\");\n        const taskIndex = currentState.findIndex(\n            (task) => Number(task.id) === Number(target.dataset.id)\n        );\n        currentState[taskIndex].isDone = !currentState\n        [taskIndex].isDone;\n    } else if(target.classList.contains(\"close\")) {\n        target.parentNode.remove();\n        const taskIndex = currentState.findIndex(\n            (task) => Number(task.id) === Number(target.parentNode.dataset.id)\n        );\n        currentState.splice(taskIndex, 1);    \n    }\n    save(STORAGE_KEY, currentState);\n}\n\nfunction createTaskObject(text, isDone) {\n    return {\n        text,\n        isDone,\n        id: currentId,\n    }\n}\n\nfunction addTaskToStorage(text, isDone = false) {\n    const currentState = load(STORAGE_KEY);\n    if(currentState === undefined) {\n        const arr = [createTaskObject(text, isDone)];\n        save(STORAGE_KEY, arr)\n    } else {\n        currentState.push(createTaskObject(text, isDone))\n        save(STORAGE_KEY, currentState)\n    }\n    currentId += 1;\n}   \n\nfunction fillTasksList() {\n    const currentState = load(STORAGE_KEY);\n\n    if(currentState !== undefined) {\n        currentState.forEach(({ text, id, isDone }) => \n        createLi(text, id, isDone));\n    }\n}\n\nexport { addNewTask, handleTaskBehavior, fillTasksList };","import { \n    addNewTask, \n    fillTasksList,\n    handleTaskBehavior\n} from \"./function\";\n\nconst myUL = document.getElementById(\"myUL\");\nconst addBtn = document.getElementById(\"addBtn\");\n\naddBtn.addEventListener('click', addNewTask);\nmyUL.addEventListener('click', handleTaskBehavior);\nwindow.addEventListener(\"DOMContentLoaded\", fillTasksList);\n \n\nconst date = new Date();\n\nsetTimeout (() => {\n    console.log(date.getFullYear());\n}, 3000)\nsetTimeout (() => {\n    console.log(date.getMinutes())\n}, 5000);\nsetTimeout (() => {\n    console.log(date.getHours());\n}, 8000);"],"names":["$f19da09a3c14f43a$export$a1544dad697b423d","key","value","data","JSON","stringify","localStorage","setItem","err","console","error","message","$f19da09a3c14f43a$export$11e63f7b0f3d9900","getItem","undefined","parse","$9d16f89e6b428233$var$myInput","document","getElementById","$9d16f89e6b428233$var$myUL","$9d16f89e6b428233$var$currentId","$9d16f89e6b428233$var$createLi","text","isDone","id","liEl","createElement","textContent","dataset","classList","add","appendChild","target","span","txt","createTextNode","className","$9d16f89e6b428233$var$addCloseButton","$9d16f89e6b428233$var$createTaskObject","$50ea03ee5b7a961b$var$myUL","addEventListener","task","trim","currentState","arr","push","$9d16f89e6b428233$var$addTaskToStorage","alert","nodeName","toggle","taskIndex","findIndex","Number","contains","parentNode","remove","splice","window","forEach","$50ea03ee5b7a961b$var$date","Date","setTimeout","log","getFullYear","getMinutes","getHours"],"version":3,"file":"toDoList.4ba7ff21.js.map"}