{"mappings":"iiBA4CA,IAAAA,EAAAC,EAAA,S,aAAMC,EAAOC,SAASC,cAAc,YAC9BC,EAAaF,SAASC,cAAc,cACpCE,EAAaH,SAASC,cAAc,WACpCG,EAAgBJ,SAASC,cAAc,sB,SA0B9BI,I,OAAAA,EAAfC,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAA4BC,G,IAClBC,EAQAC,EACAC,E,yEATAF,EAAOD,EAAII,IAAG,W,MAACR,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAO,EAAMC,G,IACjBC,E,kFAAaC,MAAM,uCAA4CC,OAALH,I,WAA1DC,EAAIG,EAAAC,MACDC,GAAE,C,eACP,MAAM,IAAIC,M,gCAEPN,EAAKO,Q,2DALWR,G,gCAAP,I,SAQDS,QAAQC,WAAWf,G,cAAhCC,EAAIe,EAAAN,KACJR,EAAaD,EAClBgB,QAAO,SAAAC,G,MAA2B,cAAlBA,EAANC,M,IACVhB,KAAI,SAAAe,G,OAAQA,EAALE,MAAkB,E,sBAEnBlB,G,2CAdIR,EAAY2B,MAAAC,KAAAC,U,UAiBZC,EAAWzB,G,OAAX0B,EAAUJ,MAAAC,KAAAC,U,UAAVE,I,OAAAA,EAAf9B,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAA6B,EAA0B3B,G,IAKhB4B,EAgBA1B,EACA2B,E,wEApBW,gCACD,kCAEVD,EAAQ5B,EAAII,IAAG,W,MAACR,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAO,EAAMyB,G,IAClBC,EAMAxB,E,yEANAwB,EAAS,IAAIC,gBAAgB,CAC/BC,IAJQ,kCAKRC,EAAGJ,EACHK,KAAM,O,SAGS3B,MAAM,GAA4BC,OAVxC,gCAUwB,kBAAuBA,OAAPsB,I,WAA/CxB,EAAIG,EAAAC,MAEDC,GAAE,C,eACP,MAAM,IAAIC,MAAMN,EAAK6B,Y,gCAGlB7B,EAAKO,Q,2DAbYgB,G,gCAAP,I,SAgBFf,QAAQC,WAAWY,G,cAAhC1B,EAAImC,EAAA1B,KACJkB,EAAM3B,EAAKgB,QAAO,SAAAC,G,MAA2B,cAAlBA,EAANC,M,IAC1BhB,KAAI,SAAAe,G,OAAQA,EAALE,K,IACRiB,QAAQC,IAAIV,G,kBACLA,G,2CAzBIH,EAAUJ,MAAAC,KAAAC,U,CA6BzB,SAASgB,EAAaxC,GAClB,OAAOA,EAAII,KAAI,SAAAe,G,QACXsB,QAAWC,EAAMC,EAAND,OAAME,EAAAD,EAAEE,UAAaC,EAAIF,EAAJE,KAAMC,EAAIH,EAAJG,KAAIC,EAAA7B,EAC1C8B,SAAYC,EAAOF,EAAPE,QAASC,EAAIH,EAAJG,K,MAAa,8CAIxB1C,OADAyC,EAAQ,2BAEFzC,OADN0C,EAAK,iCACe1C,OAAdqC,EAAK,WACZrC,OADqBsC,EAAK,uBAEbtC,OADbsC,EAAK,sCACetC,OAAPiC,EAAO,wC,IAG9BU,KAAK,G,CAnFZ3D,EAAW4D,iBAAiB,SAG5B,WAEI3D,EAAc4D,mBAAmB,YADjB,qC,IAHpB9D,EAAW6D,iBAAiB,UAO5B,SAAqBE,GACjBA,EAAEC,iB,SAesBxD,G,OAAbL,EAAY2B,MAAAC,KAAAC,U,CAZvBiC,CAFa,IAAIC,SAASH,EAAEI,eACXC,OAAO,WAAW1C,QAAO,SAAAZ,G,OAAQA,C,IAAMF,KAAI,SAAAE,G,OAAQA,EAAKuD,M,KAExEC,M,EAAKlE,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAO,EAAME,G,IACFwD,EACAC,E,yEADAD,EAAWxD,EAAKH,KAAI,SAAAe,G,OAAUA,EAAP8C,QAAsB,E,aACtBxC,EAAWsC,G,OAAlCC,EAActD,EAAAC,KACpBtB,EAAK6E,UAAY1B,EAAawB,GAE9BtE,EAAcwE,UAAW,G,oDALjB3D,G,kCAOX4D,OAAM,SAAAC,G,OAAO9B,QAAQC,IAAI6B,E,IACzBC,SAAQ,W,OAAO7E,EAAW8E,O,IARtB,I","sources":["src/countries/countries.js"],"sourcesContent":["// async function getCapital() {\n//     const URL = 'https://restcountries.com/v3.1/name/';\n//     const response = await fetch(`${URL}Ukraine`);\n//     return  response.json();\n// }\n\n// getCapital()\n// .then(data => {\n//     list.innerHTML = markupCountrie(data.results)\n// })\n// .catch(err => console.log(err));\n\n// function markupCountrie(name) {\n//     return markup = `<div>\n//         <h2>Name: ${name.common.ukr}</h2>\n//         <h3>Population: ${name.population}</h3>\n//         <div>\n//             <img src=\"${name.coatOfArms.png}\" alt=\"gerb\"  width=\"50\"/>\n//             <img src=\"${name.flags.svg}\" alt=\"flag\"  width=\"50\"/>\n//         </div>\n//     </div>`\n// }\n\n// async function getCapital() {\n//     try{\n//         const URL = 'https://restcountries.com/v3.1/name/';\n//         const arr = ['Ukraine', 'France', 'Germany'];\n    \n//         const response = arr.map(async(ctr) => {\n//             const res =  await fetch(`${URL}${ctr}`);\n//             return res.json();\n//         })\n    \n//         const promis = await Promise.allSettled(response);\n//         return promis;\n//     } catch(e) {\n//         console.log(e);\n//     }\n// }\n\n// getCapital()\n// .then(data => console.log(data))\n// .catch(e => console.log(e));\n\nconst list = document.querySelector(\".js-list\");\nconst searchForm = document.querySelector(\".js-search\");\nconst addCountry = document.querySelector(\".js-add\");\nconst formContainer = document.querySelector(\".js-form-container\");\n\naddCountry.addEventListener('click', handlerAddInput);\nsearchForm.addEventListener('submit', handlerForm)\n\nfunction handlerAddInput() {\n    const markup = `<input type=\"text\" name=\"country\">`;\n    formContainer.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction handlerForm(e) {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const arr = data.getAll('country').filter(item => item).map(item => item.trim());\n    getCountries(arr)\n    .then(async resp => {\n        const capitals = resp.map(({ capital }) => capital[0])\n        const weatherService = await getWeather(capitals);\n        list.innerHTML = createMarkup(weatherService);\n        const markup = `<input type=\"text\" name=\"country\">`;\n        formContainer.innerHTML= \"\";\n    })   \n    .catch(err => console.log(err))\n    .finally(() =>  searchForm.reset());\n}\n\nasync function getCountries(arr) {\n    const resp = arr.map(async item => {\n        const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`)\n        if(!resp.ok) {\n            throw new Error();\n        }\n        return resp.json();\n    });\n\n    const data = await Promise.allSettled(resp);\n    const countryObj = data\n    .filter(({ status }) => status === \"fulfilled\")\n    .map(({ value }) => value[0]);\n    \n    return countryObj;\n}\n\nasync function getWeather(arr) {\n\n    const BASE_URL = 'https://api.weatherapi.com/v1';\n    const API_KEY = 'c0dca8ed73ba444e8db231919241301';\n\n    const resps = arr.map(async city => {\n        const params = new URLSearchParams({\n            key: API_KEY,\n            q: city,\n            lang: \"uk\"\n        });\n\n        const resp = await fetch(`${BASE_URL}/current.json?${params}`)\n        \n        if(!resp.ok) {\n            throw new Error(resp.statusText);\n        }\n\n        return resp.json();\n    });\n    \n    const data = await Promise.allSettled(resps);\n    const obj = data.filter(({ status }) => status === \"fulfilled\")\n    .map(({ value }) => value);\n    console.log(obj)\n    return obj\n};\n\n\nfunction createMarkup(arr) {\n    return arr.map(({ \n        current: { temp_c, condition: { icon, text }}, \n        location: { country, name } }) => `\n    <li>\n        <div>\n            <h2>${country}</h2>\n            <h3>${name}</h3>\n            <img src=\"${icon}\" alt=\"${text}\">\n            <p>${text}</p>\n            <p>Температура: ${temp_c}</p>\n        </div>\n    </li>\n    `).join(\"\");\n}"],"names":["$bpxeT","parcelRequire","$c76e8011efdb0d87$var$list","document","querySelector","$c76e8011efdb0d87$var$searchForm","$c76e8011efdb0d87$var$addCountry","$c76e8011efdb0d87$var$formContainer","$c76e8011efdb0d87$var$_getCountries","$parcel$interopDefault","$2TvXO","mark","_callee1","arr","resp1","data","countryObj","map","_callee","item","resp","fetch","concat","_ctx","sent","ok","Error","json","Promise","allSettled","_ctx1","filter","param","status","value","apply","this","arguments","$c76e8011efdb0d87$var$getWeather","$c76e8011efdb0d87$var$_getWeather","_callee2","resps","obj","city","params","URLSearchParams","key","q","lang","statusText","_ctx2","console","log","$c76e8011efdb0d87$var$createMarkup","current","temp_c","_current","_condition","condition","icon","text","_location","location","country","name","join","addEventListener","insertAdjacentHTML","e","preventDefault","$c76e8011efdb0d87$var$getCountries","FormData","currentTarget","getAll","trim","then","capitals","weatherService","capital","innerHTML","catch","err","finally","reset"],"version":3,"file":"countries.a80a7df7.js.map"}